import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;
import java.util.Random;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

/*
 *TODO list 
 * print things out properly 
 *    next block, etc. 
 *    make sure zero bugs with rotation and movemeent
 * then polish and put everything together with menus, speeds, levels SCORING, etc. 
 * do you want to do levels??
 * redo the initialzation of holdGrid and nextShapeGrid, utilize initGrid()
 * fix tempHold issue
 */

/**
 * Similar to the old arcade game. Falling pieces, or {@link TetrisShapes} move down 
 * and the user must use the arrow keys to navigate them into place on the board.
 * The user can see which three next blocks are coming up next. There is a <code>hold</code> function
 * implemented to store one block for later.
 * <p>
 * {@link TetrisShapes} are essentially {@link ArrayList}s of {@link TetrisBlock}s, but are in charge of 
 * everything involving the shape. </br>
 * The game is built on a <code>2D Array</code> of {@link Location}s, which are points holding an x, y, color, 
 * and fullness attribute. The Shapes check if each <code>Location</code> is <code>full</code> 
 * and reacts to the information by restricting the user to certain movements.
 * </p>
 * 
 * @author Thomas Varano
 *
 */
public class Tetris extends JPanel
      implements
         MouseListener,
         MouseMotionListener,
         KeyListener,
         ActionListener
{
   private static final long serialVersionUID = 1L;
   public static final int PREF_W = 1000;
   public static final int PREF_H = 800;
   public final int MIN_PLAY_R = 5;
   public final int MAX_PLAY_R = 21;
   public final int MIN_PLAY_C = 3;
   public final int MAX_PLAY_C = 12;
   private long counter = 0;
   private RenderingHints hints = new RenderingHints(
         RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
   private Timer timer = new Timer(5, this);
   private Font testFont = new Font("Prestige Elite Std", Font.PLAIN, 10);
   private Font font = new Font("Prestige Elite Std", Font.PLAIN, 50);
   public static Rectangle nextBoard = new Rectangle(700, 50, 180, 300);
   public static Rectangle holdBoard = new Rectangle(490, 50, 180, 180);
   private boolean initGame, pause, holding;
   private TetrisShapes nextShapeOne, nextShapeTwo, nextShapeThree, playerShape, tempHold;
   private BlockPresets presetter;
   private int rotatePace, arrowPace, holdShape;
   public static Location[][] grid;
   public static Location[][] nextShapeGrid = {
         {new Location((int) nextBoard.getX() + 10, (int) nextBoard.getY() + 10),
               new Location((int) nextBoard.getX() + 50, (int) nextBoard.getY() + 10),
               new Location((int) nextBoard.getX() + 90, (int) nextBoard.getY() + 10),
               new Location((int) nextBoard.getX() + 130, (int) nextBoard.getY() + 10)},
         {new Location((int) nextBoard.getX() + 10,(int) nextBoard.getY() + 50),
               new Location((int) nextBoard.getX() + 50, (int) nextBoard.getY() + 50),
               new Location((int) nextBoard.getX() + 90, (int) nextBoard.getY() + 50),
               new Location((int) nextBoard.getX() + 130, (int) nextBoard.getY() + 50)},
         {new Location((int) nextBoard.getX() + 10, (int) nextBoard.getY() + 90),
               new Location((int) nextBoard.getX() + 50, (int) nextBoard.getY() + 90),
               new Location((int) nextBoard.getX() + 90, (int) nextBoard.getY() + 90),
               new Location((int) nextBoard.getX() + 130, (int) nextBoard.getY() + 90)},
         {new Location((int) nextBoard.getX() + 10, (int) nextBoard.getY() + 130),
               new Location((int) nextBoard.getX() + 50, (int) nextBoard.getY() + 130),
               new Location((int) nextBoard.getX() + 90, (int) nextBoard.getY() + 130),
               new Location((int) nextBoard.getX() + 130, (int) nextBoard.getY() + 130)},
         {new Location((int) nextBoard.getX() + 10, (int) nextBoard.getY() + 170),
               new Location((int) nextBoard.getX() + 50, (int) nextBoard.getY() + 170),
               new Location((int) nextBoard.getX() + 90, (int) nextBoard.getY() + 170),
               new Location((int) nextBoard.getX() + 130, (int) nextBoard.getY() + 170)}};
   public static Location[][] holdGrid = {
         {new Location((int) holdBoard.getX() + 10, (int) holdBoard.getY() + 10),
               new Location((int) holdBoard.getX() + 50, (int) holdBoard.getY() + 10),
               new Location((int) holdBoard.getX() + 90, (int) holdBoard.getY() + 10),
               new Location((int) holdBoard.getX() + 130, (int) holdBoard.getY() + 10)},
         {new Location((int) holdBoard.getX() + 10, (int) nextBoard.getY() + 50),
               new Location((int) holdBoard.getX() + 50, (int) holdBoard.getY() + 50),
               new Location((int) holdBoard.getX() + 90, (int) holdBoard.getY() + 50),
               new Location((int) holdBoard.getX() + 130, (int) holdBoard.getY() + 50)},
         {new Location((int) holdBoard.getX() + 10, (int) holdBoard.getY() + 90),
               new Location((int) holdBoard.getX() + 50, (int) holdBoard.getY() + 90),
               new Location((int) holdBoard.getX() + 90, (int) holdBoard.getY() + 90),
               new Location((int) holdBoard.getX() + 130, (int) holdBoard.getY() + 90)},
         {new Location((int) holdBoard.getX() + 10, (int) holdBoard.getY() + 130),
               new Location((int) holdBoard.getX() + 50, (int) holdBoard.getY() + 130),
               new Location((int) holdBoard.getX() + 90, (int) holdBoard.getY() + 130),
               new Location((int) holdBoard.getX() + 130, (int) holdBoard.getY() + 130)},
         {new Location((int) holdBoard.getX() + 10, (int) holdBoard.getY() + 170),
               new Location((int) holdBoard.getX() + 50, (int) holdBoard.getY() + 170),
               new Location((int) holdBoard.getX() + 90, (int) holdBoard.getY() + 170),
               new Location((int) holdBoard.getX() + 130, (int) holdBoard.getY() + 170)}};
   private Location nextTwo = new Location(nextShapeGrid[3][1].getX(), nextShapeGrid[3][1].getY()+55);
   private Location nextThree = new Location(nextShapeGrid[3][1].getX(), nextShapeGrid[3][1].getY()+110);
   private Random random;
   private ArrayList<Integer> linesToRemove;

   public Tetris() {
      this.addMouseListener(this);
      this.addMouseMotionListener(this);
      this.addKeyListener(this);
      setFocusable(true);
      this.setBackground(new Color(100,100,100));
      grid = new Location[24][16];
      initGrid();
      rotatePace = arrowPace = 0;
      presetter = new BlockPresets(grid, 40, 100);
      random = new Random();
      holdShape = 10;
      linesToRemove = new ArrayList<Integer>();
      initGame = false;
      holding = false;
      timer.start();
   }

   @Override
   protected void paintComponent(Graphics g) {
      super.paintComponent(g);
      Graphics2D g2 = (Graphics2D) g;
      g2.setRenderingHints(hints);
      // if initGame
      g2.setFont(font);
      g2.setColor(Color.WHITE);
      g2.fill(nextBoard);
      g2.drawString("Next", (int)nextBoard.getX()+30, (int)nextBoard.getMaxY()+40);
      g2.fill(holdBoard);
      g2.drawString("Hold", (int)holdBoard.getX()+30, (int)holdBoard.getMaxY()+40);
      for (int i = MIN_PLAY_R; i < MAX_PLAY_R+1; i++) {   
         for (int j = MIN_PLAY_C; j < MAX_PLAY_C+1; j++) {
            grid[i][j].draw(g2);
         }
      }
      g2.setFont(testFont);
      
//      for (int i = 0; i < grid.length; i++) {
//         for (int j = 0; j < grid[i].length; j++) {
//            g2.setColor(Color.GREEN);
//            if (grid[i][j].isFull())
//               g2.setColor(Color.RED);
//            g2.drawRect(grid[i][j].getX(), grid[i][j].getY(), 40, 40);
//            g2.drawString(i + "," + j, grid[i][j].getX(),
//                  grid[i][j].getY() + 15);
//         }
//      }
      
      if (tempHold!=null)
         tempHold.draw(g2);
      g2.setColor(Color.GREEN);
      for (int i = 0; i < nextShapeGrid.length; i++) {
         for (int j = 0; j < nextShapeGrid[i].length; j++) {
            g2.drawRect(nextShapeGrid[i][j].getX(), nextShapeGrid[i][j].getY(),
                  40, 40);
            g2.drawString(i + "," + j, nextShapeGrid[i][j].getX(),
                  nextShapeGrid[i][j].getY() + 15);
         }
      }
      for (int i = 0; i < holdGrid.length; i++) {
         for (int j = 0; j < holdGrid[i].length; j++) {
            g2.drawRect(holdGrid[i][j].getX(), holdGrid[i][j].getY(),
                  40, 40);
            g2.drawString(i + "," + j, holdGrid[i][j].getX(),
                  holdGrid[i][j].getY() + 15);
         }
      }
      nextTwo.draw(g2);
      nextThree.draw(g2);
      nextShapeOne.draw(g2);
      g2.drawString(nextBoard.toString(), (int) nextBoard.getX() - 20,
            (int) nextBoard.getY());
      playerShape.draw(g2);
      g2.setFont(font);

      if (!initGame) {
      }
      if (isGameOver()) {
         g2.drawString("GameOver", 400, 500);
      } else if (pause) {
         g2.drawString("PAUSE", 400, 500);
      }
   }

   public void initGrid() {
      for (int i = 0; i < grid.length; i++) {
         for (int j = 0; j < grid[i].length; j++) {
            grid[i][j] = new Location(j * 40 - 50, i * 40 - 130);
         }
      }
      for (int i = 0; i < grid.length; i++) {
         for (int j = 0; j < grid[i].length; j++) {
            grid[i][0].setFull(true);
            grid[i][1].setFull(true);
            grid[i][2].setFull(true);
            grid[i][13].setFull(true);
            grid[i][14].setFull(true);
            grid[i][15].setFull(true);
            if (i == 21) {
               grid[22][j].setFull(true);
               grid[23][j].setFull(true);
            }
            System.out.println(grid[18][0]);
         }
      }
      for(int i = 0; i<holdGrid[4].length; i++){
         holdGrid[4][i].setFull(true);
         nextShapeGrid[4][i].setFull(true);
      }
   }

   public static Location[][] getGrid() {
      return grid;
   }
   public void setGrid(Location[][] grid) {
      Tetris.grid = grid;
   }
   public static Location[][] getNextShapeGrid() {
      return nextShapeGrid;
   }
   public void setNextShapeGrid(Location[][] grid) {
      Tetris.nextShapeGrid = grid;
   }

   public Dimension getPreferredSize() {
      return new Dimension(PREF_W, PREF_H);
   }

   private static void createAndShowGUI() {
      JFrame frame = new JFrame("Tetris");
      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      frame.getContentPane().add(new Tetris());
      frame.pack();
      frame.setLocationRelativeTo(null);
      frame.setVisible(true);
      frame.setResizable(false);
   }

   public TetrisShapes intToShape(int a) {
      switch (a) {
         case 0 :
            return presetter.getIBlock(4,7);
         case 1 :
            return presetter.getLBlock(4,7);
         case 2 :
            return presetter.getJBlock(4,7);
         case 3 :
            return presetter.getOBlock(4,7);
         case 4 :
            return presetter.getZBlock(4,7);
         case 5 :
            return presetter.getTBlock(4,7);
         case 6 :
            return presetter.getSBlock(4,7);
         default :
            return null;
      }
   }
   
   public int shapeToInt(TetrisShapes s){
      if(s.labelEquals(presetter.getIBlock(0, 0).getLabel()))
         return 0;
      else if(s.labelEquals(presetter.getLBlock(0, 0).getLabel()))
         return 1;
      else if(s.labelEquals(presetter.getJBlock(0, 0).getLabel()))
         return 2;
      else if(s.labelEquals(presetter.getOBlock(0, 0).getLabel()))
         return 3;
      else if(s.labelEquals(presetter.getZBlock(0, 0).getLabel()))
         return 4;
      else if(s.labelEquals(presetter.getTBlock(0, 0).getLabel()))
         return 5;
      else if(s.labelEquals(presetter.getSBlock(0, 0).getLabel()))
         return 6;
      else return 10;
   }

   public void init() {
      nextShapeOne = intToShape(random.nextInt(7));
      nextShapeTwo = intToShape(random.nextInt(7));
      nextShapeThree = intToShape(random.nextInt(7));
      playerShape = intToShape(random.nextInt(7));
   }

   public void addNew() {
      playerShape = nextShapeOne;
      playerShape.stillToUpdate();
      nextShapeOne = nextShapeTwo;
      nextShapeTwo = nextShapeThree;
      nextShapeThree = intToShape(random.nextInt(7));
   }

   public void update() {
      if (counter == 0) {
         init();
         counter++;
      } else {
         if(!isGameOver()){
            if(!pause){
               playerShape.update();
               nextShapeOne.setGrid(nextShapeGrid);
               nextShapeOne.still(nextShapeGrid[1][1]);
               tempHold = intToShape(holdShape);
               if(tempHold!=null)
                  tempHold.still(holdGrid[3][1]);
               
               if (!playerShape.isMoveableDown()) {
                  playerShape.collide();
                  if(playerShape.isCollided())
                     addNew();
               }
               lineIsClear();
               clearLine();
               nextTwo.setColor(nextShapeTwo.getColor());
               nextThree.setColor(nextShapeThree.getColor());
            }
         }
      }
   }
   
   public void lineIsClear() {
      for (int i = 0; i < grid.length-2; i++) {
         for (int j = 0; j < grid[i].length; j++) {
            if (!grid[i][j].isFull()) {
               break;
            } else {
               if (j == grid[i].length - 1) {
                  linesToRemove.add(i);
                  System.out.println("CLEAR THE LINE "+i);
               } else
                  continue;
            }
         }
      }
   }

   public void clearLine() {
      //TODO make it white, wait, then move it??
      
      if(!linesToRemove.isEmpty()){
//         for (int i = 0; i < linesToRemove.size(); i++) {
//            for (int j = MIN_PLAY_C; j < MAX_PLAY_C+1; j++) {
//               grid[linesToRemove.get(i)][j].setFull(false);
//               grid[linesToRemove.get(i)][j].setColor(Color.WHITE);
//               System.out.println("grid["+i+"]["+j+"]");
//            }
//         }
         for (int i = 0; i<linesToRemove.size(); i++){
            for (int j = linesToRemove.get(i); j>1; j--){
               for (int k = MIN_PLAY_C; k<MAX_PLAY_C+1; k++){
                  grid[j][k].setColor(grid[j-1][k].getColor());
                  grid[j][k].setFull(grid[j-1][k].isFull());
               }
            }
         }
         System.out.println("CLEARINGGGG");
         linesToRemove.clear();
      }
   }
   
   public void reset(){
      initGrid();
      counter = 0;
   }
   
   public boolean isGameOver(){
      for(int i = 3; i<13; i++){
         if (grid[5][i].isFull()){
            return true;
         }
      }
      return false;
   }
   
   public void hold(){
      if(!holding){
         System.out.println("addingHold");
         holdShape = shapeToInt(playerShape);
         playerShape = nextShapeOne;
         nextShapeOne = nextShapeTwo;
         nextShapeTwo = nextShapeThree;
         nextShapeThree = intToShape(random.nextInt(7));
         holding = true;
      } else {
         System.out.println("takngHold");
         System.out.println(holdShape);
         nextShapeThree = nextShapeTwo;
         nextShapeTwo = nextShapeOne;
         nextShapeOne = playerShape;
         playerShape = intToShape(holdShape);
         holdShape = 10;
         holding = false;
      }
   }
   
   public static void main(String[] args) {
      SwingUtilities.invokeLater(new Runnable() {
         public void run() {
            createAndShowGUI();
         }
      });
   }

   @Override
   public void mouseDragged(MouseEvent e) {
      System.out.println("dragging the mouse");
   }

   @Override
   public void mouseMoved(MouseEvent e) {
   }

   @Override
   public void mouseClicked(MouseEvent e) {
   }

   @Override
   public void mousePressed(MouseEvent e) {
      System.out.println("pressing the mouse");
   }

   @Override
   public void mouseReleased(MouseEvent e) {
   }

   @Override
   public void mouseEntered(MouseEvent e) {
   }

   @Override
   public void mouseExited(MouseEvent e) {
   }

   @Override
   public void keyTyped(KeyEvent e) {
   }

   @Override
   public void keyPressed(KeyEvent e) {
      int key = e.getKeyCode();
      if (!isGameOver()){
         if(!pause){
            if (arrowPace == 0) {
               if (key == KeyEvent.VK_RIGHT) {
                  playerShape.setRight(true);
                  arrowPace = 1;
               } else if (key == KeyEvent.VK_LEFT) {
                  playerShape.setLeft(true);
                  arrowPace = 2;
               }
            }
            if (rotatePace == 0) {
               if (key == KeyEvent.VK_UP) {
                  playerShape.setRotate(true);
                  rotatePace = 1;
               }
            }
            if (key == KeyEvent.VK_DOWN) {
               playerShape.setSpeedUp(true);
            } else if (key == KeyEvent.VK_ENTER){
               hold();
            } else if (key == KeyEvent.VK_SPACE){
               playerShape.setDropped(true);
            }
         } 
         if (key == KeyEvent.VK_ESCAPE){
            pause = !pause;
         }
      }
      else{
         if (key == KeyEvent.VK_SPACE){
            reset();
         }
      }
   }

   @Override
   public void keyReleased(KeyEvent e) {
      int key = e.getKeyCode();
      if (key == KeyEvent.VK_RIGHT) {
         playerShape.setRight(false);
         arrowPace = 0;
      } else if (key == KeyEvent.VK_LEFT) {
         playerShape.setLeft(false);
         arrowPace = 0;
      }
      if (key == KeyEvent.VK_UP) {
         rotatePace = 0;
      }
      if (key == KeyEvent.VK_DOWN) {
         playerShape.setSpeedUp(false);
      }
   }

   @Override
   public void actionPerformed(ActionEvent e) {
      update();
      repaint();
   }
}
